library(MVN)
library(dplyr)
# Random sample
sample_df <- sample_n(df, 1000)
# Build model
model <- lm(helpful_log ~ appraise + review_word_count + games + reply + played_hour + image, data = sample_df)
# Then, we can see the result
summary(model)
# VIF Multicollinearity test
vif(mod = model)
# Breusch-Pagan test: to check homoscedasticity
ncvTest(model)
# - plot Q-Q plot of residuals
qqnorm(model$residuals)
qqline(model$residuals)
# - plot density plot of residuals
plot(density(model$residuals), main = "Density plot of residuals")
# - scatter plot of residuals
plot(model$fitted.values, model$residuals, xlab = "Fitted values", ylab = "Residuals")
# Multivariate normality test
# mvn(model$residuals, mvnTest = "mardia")
# install.packages('car')
# install.packages('MVN')
library(car)
library(MVN)
library(dplyr)
# Random sample
sample_df <- sample_n(df, 1000)
# Build model
model <- lm(helpful_log ~ appraise + review_word_count + games + reply + played_hour + image, data = sample_df)
# Then, we can see the result
summary(model)
# VIF Multicollinearity test
vif(mod = model)
# Breusch-Pagan test: to check homoscedasticity
ncvTest(model)
# - plot Q-Q plot of residuals
qqnorm(model$residuals)
qqline(model$residuals)
# - plot density plot of residuals
plot(density(model$residuals), main = "Density plot of residuals")
# - scatter plot of residuals
plot(model$fitted.values, model$residuals, xlab = "Fitted values", ylab = "Residuals")
# Multivariate normality test
# mvn(model$residuals, mvnTest = "mardia")
# install.packages('car')
# install.packages('MVN')
library(car)
library(MVN)
library(dplyr)
# Random sample
sample_df <- sample_n(df, 2000)
# Build model
model <- lm(helpful_log ~ appraise + review_word_count + games + reply + played_hour + image, data = sample_df)
# Then, we can see the result
summary(model)
# VIF Multicollinearity test
vif(mod = model)
# Breusch-Pagan test: to check homoscedasticity
ncvTest(model)
# - plot Q-Q plot of residuals
qqnorm(model$residuals)
qqline(model$residuals)
# - plot density plot of residuals
plot(density(model$residuals), main = "Density plot of residuals")
# - scatter plot of residuals
plot(model$fitted.values, model$residuals, xlab = "Fitted values", ylab = "Residuals")
# Multivariate normality test
# mvn(model$residuals, mvnTest = "mardia")
# install.packages('car')
# install.packages('MVN')
library(car)
library(MVN)
library(dplyr)
# Random sample
set.seed(123)
sample_df <- sample_n(df, 2000)
# Build model
model <- lm(helpful_log ~ appraise + review_word_count + games + reply + played_hour + image, data = sample_df)
# Then, we can see the result
summary(model)
# VIF Multicollinearity test
vif(mod = model)
# Breusch-Pagan test: to check homoscedasticity
ncvTest(model)
# - plot Q-Q plot of residuals
qqnorm(model$residuals)
qqline(model$residuals)
# - plot density plot of residuals
plot(density(model$residuals), main = "Density plot of residuals")
# - scatter plot of residuals
plot(model$fitted.values, model$residuals, xlab = "Fitted values", ylab = "Residuals")
# Multivariate normality test
# mvn(model$residuals, mvnTest = "mardia")
# install.packages('car')
# install.packages('MVN')
library(car)
library(MVN)
library(dplyr)
# Random sample
set.seed(123)
sample_df <- sample_n(df, 1000)
# Build model
model <- lm(helpful_log ~ appraise + review_word_count + games + reply + played_hour + image, data = sample_df)
# Then, we can see the result
summary(model)
# VIF Multicollinearity test
vif(mod = model)
# Breusch-Pagan test: to check homoscedasticity
ncvTest(model)
# - plot Q-Q plot of residuals
qqnorm(model$residuals)
qqline(model$residuals)
# - plot density plot of residuals
plot(density(model$residuals), main = "Density plot of residuals")
# - scatter plot of residuals
plot(model$fitted.values, model$residuals, xlab = "Fitted values", ylab = "Residuals")
# Multivariate normality test
# mvn(model$residuals, mvnTest = "mardia")
# install.packages('car')
# install.packages('MVN')
library(car)
library(MVN)
library(dplyr)
# Random sample
set.seed(123)
sample_df <- sample_n(df, 1000)
# Build model
model <- lm(helpful ~ appraise + review_word_count + games + reply + played_hour + image, data = sample_df)
# Then, we can see the result
summary(model)
# VIF Multicollinearity test
vif(mod = model)
# Breusch-Pagan test: to check homoscedasticity
ncvTest(model)
# - plot Q-Q plot of residuals
qqnorm(model$residuals)
qqline(model$residuals)
# - plot density plot of residuals
plot(density(model$residuals), main = "Density plot of residuals")
# - scatter plot of residuals
plot(model$fitted.values, model$residuals, xlab = "Fitted values", ylab = "Residuals")
# Multivariate normality test
# mvn(model$residuals, mvnTest = "mardia")
# install.packages('car')
# install.packages('MVN')
library(car)
library(MVN)
library(dplyr)
# Random sample
set.seed(123)
sample_df <- sample_n(df, 1000)
# Build model
model <- lm(helpful_log ~ appraise + review_word_count + games + reply + played_hour + image, data = sample_df)
# Then, we can see the result
summary(model)
# VIF Multicollinearity test
vif(mod = model)
# Breusch-Pagan test: to check homoscedasticity
ncvTest(model)
# - plot Q-Q plot of residuals
qqnorm(model$residuals)
qqline(model$residuals)
# - plot density plot of residuals
plot(density(model$residuals), main = "Density plot of residuals")
# - scatter plot of residuals
plot(model$fitted.values, model$residuals, xlab = "Fitted values", ylab = "Residuals")
# Multivariate normality test
# mvn(model$residuals, mvnTest = "mardia")
# install.packages('car')
# install.packages('MVN')
library(car)
library(MVN)
library(dplyr)
# Random sample
set.seed(123)
sample_df <- sample_n(df, 100)
# Build model
model <- lm(helpful_log ~ appraise + review_word_count + games + reply + played_hour + image, data = sample_df)
# Then, we can see the result
summary(model)
# VIF Multicollinearity test
vif(mod = model)
# install.packages('car')
# install.packages('MVN')
library(car)
library(MVN)
library(dplyr)
# Random sample
set.seed(123)
sample_df <- sample_n(df, 1000)
# Build model
model <- lm(helpful_log ~ appraise + review_word_count + games + reply + played_hour + image, data = sample_df)
# Then, we can see the result
summary(model)
# VIF Multicollinearity test
vif(mod = model)
# Breusch-Pagan test: to check homoscedasticity
ncvTest(model)
# - plot Q-Q plot of residuals
qqnorm(model$residuals)
qqline(model$residuals)
# - plot density plot of residuals
plot(density(model$residuals), main = "Density plot of residuals")
# - scatter plot of residuals
plot(model$fitted.values, model$residuals, xlab = "Fitted values", ylab = "Residuals")
# Multivariate normality test
# mvn(model$residuals, mvnTest = "mardia")
library(readr)
Red_Dead_Redemption_2 <- read_csv("testoutput/Red-Dead-Redemption-2.csv")
View(Red_Dead_Redemption_2)
library(readr)
Sid_Meier_s_Civilization_VI <- read_csv("testoutput/Sid-Meierâ€™s-Civilization-VI.csv")
View(Sid_Meier_s_Civilization_VI)
take_log <- function(x) {
# To avoid negative infinity
# add one
x <- round(log10(x + 1), digits = 4)
}
df$helpful_log <- sapply(df$helpful, take_log)
ggplot(data = df, mapping = aes(x = helpful_log)) + geom_histogram(boundary = 0)
# install.packages('car')
# install.packages('MVN')
library(car)
library(MVN)
library(dplyr)
# Random sample
set.seed(123)
sample_df <- sample_n(df, 1000)
# Build model
model <- lm(helpful_log ~ appraise + review_word_count + games + reply + played_hour + image, data = sample_df)
# Then, we can see the result
summary(model)
# VIF Multicollinearity test
vif(mod = model)
# Breusch-Pagan test: to check homoscedasticity
ncvTest(model)
# - plot Q-Q plot of residuals
qqnorm(model$residuals)
qqline(model$residuals)
# - plot density plot of residuals
plot(density(model$residuals), main = "Density plot of residuals")
# - scatter plot of residuals
plot(model$fitted.values, model$residuals, xlab = "Fitted values", ylab = "Residuals")
# Multivariate normality test
# mvn(model$residuals, mvnTest = "mardia")
x <- c (1, 3, 5, 7, 9)
x <- cut(x, breaks = c(0, 1, 5, 10), labels = c("A", "B", "C", "D"))
x <- c (1, 3, 5, 7, 9)
x <- cut(x, breaks = c(0, 1, 5, 10), labels = c("A", "B", "C"))
x
x <- c (0, 1, 3, 5, 7, 9)
x <- cut(x, breaks = c(0, 1, 5, 10), labels = c("A", "B", "C"))
x
x <- c (0, 1, 3, 5, 7, 9)
x <- cut(x, breaks = c(-1, 0, 5, 30, 100, 500, Inf), labels = c("0 Useful", "1-5 Useful", "6-30 Useful", "31-100 Useful", "101-500 Useful", "501+ Useful"))
x
df$helpful_category <- cut(df$helpful, breaks = c(-1, 0, 5, 30, 100, 500, Inf), labels = c("0 Useful", "1-5 Useful", "6-30 Useful", "31-100 Useful", "101-500 Useful", "501+ Useful"))
summary(df$helpful_category)
df$helpful_category <- cut(df$helpful, breaks = c(-1, 0, 2, 5, 30, 100, 500, Inf), labels = c("0 Useful", "1-2 Useful", "3-5 Useful", "6-30 Useful", "31-100 Useful", "101-500 Useful", "501+ Useful"))
summary(df$helpful_category)
df$helpful_category <- cut(df$helpful, breaks = c(-1, 0, 1, 2, 5, 30, 100, 500, Inf), labels = c("0 Useful", "1 Useful", "2 Useful", "3-5 Useful", "6-30 Useful", "31-100 Useful", "101-500 Useful", "501+ Useful"))
summary(df$helpful_category)
csvpaths <- file.path('..', 'testoutput')
filenames <- list.files(csvpaths)
print(c('Number of games:', length(filenames)))
print(filenames)
library(quanteda)
library(SentimentAnalysis)
library(pbapply)
count_meaningful_word <- function(x) {
x <- as.integer(countWords(x))
}
filter_meaningless_word <- function(x) {
x <- tokens(x, remove_symbols = TRUE)
x <- paste(as.character(x), collapse = " ")
}
chr2int <- function(x) {
x <- gsub('[^0-9.]', '', x)
x <- as.numeric(x)
}
df <- NULL
for (filename in filenames) {
print(filename)
# load game name
gamename <- strsplit(filename, split = '.', fixed = TRUE)[[1]][1]
# load DF
csvdata <- read.csv(file = file.path(csvpaths, filename), row.names = 1)
# add game name into DF
csvdata$name_of_game <- gamename
# Text Quality Analysis
csvdata$review <- pbsapply(csvdata$review, filter_meaningless_word)
# Count Useful Words
csvdata$review_word_count <- pbsapply(csvdata$review, count_meaningful_word)
# Drop non-content record
csvdata <- subset(csvdata, review_word_count > 5)
# Manage data type
csvdata$helpful <- sapply(csvdata$helpful, chr2int)
csvdata$funny <- sapply(csvdata$funny, chr2int)
csvdata$played_hour <- sapply(csvdata$played_hour, chr2int)
csvdata$games <- sapply(csvdata$games, chr2int)
# Replace NA by 0
csvdata <- replace(csvdata, is.na(csvdata), 0)
# bind vertical
df <- rbind(df, csvdata)
rm(gamename, csvdata, filename)
}
write.csv(df, file = 'df3.csv', row.names = FALSE)
df <- read.csv(file = 'df3.csv', header = TRUE)
View(df)
csvpaths <- file.path('..', 'testoutput')
filenames <- list.files(csvpaths)
print(c('Number of games:', length(filenames)))
print(filenames)
library(quanteda)
library(SentimentAnalysis)
library(pbapply)
count_meaningful_word <- function(x) {
x <- as.integer(countWords(x))
}
filter_meaningless_word <- function(x) {
x <- tokens(x, remove_symbols = TRUE)
x <- paste(as.character(x), collapse = " ")
}
chr2int <- function(x) {
x <- gsub('[^0-9.]', '', x)
x <- as.numeric(x)
}
df <- NULL
for (filename in filenames) {
print(filename)
# load game name
gamename <- strsplit(filename, split = '.', fixed = TRUE)[[1]][1]
# load DF
csvdata <- read.csv(file = file.path(csvpaths, filename), row.names = 1)
# add game name into DF
csvdata$name_of_game <- gamename
# Text Quality Analysis
csvdata$review <- pbsapply(csvdata$review, filter_meaningless_word)
# Count Useful Words
csvdata$review_word_count <- pbsapply(csvdata$review, count_meaningful_word)
# Drop non-content record
csvdata <- subset(csvdata, review_word_count > 5)
# Manage data type
csvdata$helpful <- sapply(csvdata$helpful, chr2int)
csvdata$funny <- sapply(csvdata$funny, chr2int)
csvdata$played_hour <- sapply(csvdata$played_hour, chr2int)
csvdata$games <- sapply(csvdata$games, chr2int)
# Replace NA by 0
csvdata <- replace(csvdata, is.na(csvdata), 0)
# bind vertical
df <- rbind(df, csvdata)
rm(gamename, csvdata, filename)
}
# install.packages(c('SentimentAnalysis', 'quanteda', 'devtools', 'syuzhet', 'pbapply'))
# remotes::install_github("r-lib/rlang")
write.csv(df, file = 'df3.csv', row.names = FALSE)
# Useless
# library(syuzhet)
# get_nrc_sentiment(as.character(meaningful_words))
# library(SentimentAnalysis)
# text <- "I love this game. It is so fun and exciting."
# result <- analyzeSentiment(text)
# print(result)
df <- read.csv(file = 'df3.csv', header = TRUE)
View(df)
# df$helpful_category <- cut(df$helpful, breaks = c(-1, 0, 1, 2, 5, 30, 100, 500, Inf), labels = c("0 Useful", "1 Useful", "2 Useful", "3-5 Useful", "6-30 Useful", "31-100 Useful", "101-500 Useful", "501+ Useful"))
# summary(df$helpful_category)
log(exp(1))
df <- read.csv(file = 'df3.csv', header = TRUE)
# df$helpful_category <- cut(df$helpful, breaks = c(-1, 0, 1, 2, 5, 30, 100, 500, Inf), labels = c("0 Useful", "1 Useful", "2 Useful", "3-5 Useful", "6-30 Useful", "31-100 Useful", "101-500 Useful", "501+ Useful"))
# summary(df$helpful_category)
log(exp(2))
# df$helpful_category <- cut(df$helpful, breaks = c(-1, 0, 1, 2, 5, 30, 100, 500, Inf), labels = c("0 Useful", "1 Useful", "2 Useful", "3-5 Useful", "6-30 Useful", "31-100 Useful", "101-500 Useful", "501+ Useful"))
# summary(df$helpful_category)
summary(df$name_of_game)
df <- read.csv(file = 'df3.csv', header = TRUE)
df$name_of_game <- as.factor(df$name_of_game)
# df$helpful_category <- cut(df$helpful, breaks = c(-1, 0, 1, 2, 5, 30, 100, 500, Inf), labels = c("0 Useful", "1 Useful", "2 Useful", "3-5 Useful", "6-30 Useful", "31-100 Useful", "101-500 Useful", "501+ Useful"))
# summary(df$helpful_category)
summary(df$name_of_game)
# df$helpful_category <- cut(df$helpful, breaks = c(-1, 0, 1, 2, 5, 30, 100, 500, Inf), labels = c("0 Useful", "1 Useful", "2 Useful", "3-5 Useful", "6-30 Useful", "31-100 Useful", "101-500 Useful", "501+ Useful"))
# summary(df$helpful_category)
summary(df)
summary(df$name_of_game)
df <- read.csv(file = 'df3.csv', header = TRUE)
df$image <- as.factor(df$image)
df$name_of_game <- as.factor(df$name_of_game)
# df$helpful_category <- cut(df$helpful, breaks = c(-1, 0, 1, 2, 5, 30, 100, 500, Inf), labels = c("0 Useful", "1 Useful", "2 Useful", "3-5 Useful", "6-30 Useful", "31-100 Useful", "101-500 Useful", "501+ Useful"))
# summary(df$helpful_category)
summary(df)
summary(df$name_of_game)
library(dplyr)
df %>%
group_by(name_of_game) %>%
mutate(browsing_coefficient = log(max(page_index)))
View(df)
library(dplyr)
df_browsing_coefficient <- df %>%
group_by(name_of_game) %>%
mutate(browsing_coefficient = log(max(page_index)))
View(df_browsing_coefficient)
library(dplyr)
df_browsing_coefficient <- df %>%
group_by(name_of_game) %>%
summarise(max_index = max(page_index))
# mutate(browsing_coefficient = log(max(page_index)))
library(dplyr)
df_browsing_coefficient <- df %>%
group_by(name_of_game) %>%
summarise(max_index = log(max(page_index)))
# mutate(browsing_coefficient = log(max(page_index)))
library(dplyr)
df_browsing_coefficient <- df %>%
group_by(name_of_game) %>%
# summarise(max_index = log(max(page_index))) %>%
mutate(browsing_coefficient = log(max(page_index)))
library(dplyr)
df_browsing_coefficient <- df %>%
group_by(name_of_game) %>%
# summarise(max_index = log(max(page_index))) %>%
mutate(browsing_coefficient = -(log(page_index)) + (log(max(page_index)) + 1) )
library(dplyr)
df_browsing_coefficient <- df %>%
group_by(name_of_game) %>%
# summarise(max_index = log(max(page_index))) %>%
mutate(browsing_coefficient = -(log(page_index-0.5)) + (log(max(page_index)) + 1) )
library(dplyr)
df_browsing_coefficient <- df %>%
group_by(name_of_game) %>%
# summarise(max_index = log(max(page_index))) %>%
mutate(browsing_coefficient = -(log(page_index-0.9)) + (log(max(page_index)) + 1) )
library(dplyr)
df_browsing_coefficient <- df %>%
group_by(name_of_game) %>%
# summarise(max_index = log(max(page_index))) %>%
mutate(browsing_coefficient = -(log(page_index-1)) + (log(max(page_index)) + 1) )
library(dplyr)
df_browsing_coefficient <- df %>%
group_by(name_of_game) %>%
# summarise(max_index = log(max(page_index))) %>%
mutate(browsing_coefficient = -(log(page_index-0.99)) + (log(max(page_index)) + 1) )
library(dplyr)
df_browsing_coefficient <- df %>%
group_by(name_of_game) %>%
# summarise(max_index = log(max(page_index))) %>%
mutate(browsing_coefficient = -(log(page_index-0.9)) + (log(max(page_index-0.9)) + 1) )
library(dplyr)
df_browsing_coefficient <- df %>%
group_by(name_of_game) %>%
# summarise(max_index = log(max(page_index))) %>%
mutate(browsing_coefficient = -(log(page_index*0.5-0.45)) + (log(max(page_index*0.5-0.45)) + 1))
library(dplyr)
df_browsing_coefficient <- df %>%
group_by(name_of_game) %>%
mutate(browsing_coefficient = -(log(page_index*0.5-0.45)) + (log(max(page_index*0.5-0.45)) + 1))
df_browsing_coefficient <- df_browsing_coefficient %>%
mutate(helpful_browsing_coefficient = helpful / browsing_coefficient)
df_browsing_coefficient$helpful_category <- cut(df_browsing_coefficient$helpful, breaks = c(-1, 0, 1, 2, 5, 30, 100, 500, Inf), labels = c("0 Useful", "1 Useful", "2 Useful", "3-5 Useful", "6-30 Useful", "31-100 Useful", "101-500 Useful", "501+ Useful"))
summary(df_browsing_coefficient$helpful_category)
df_browsing_coefficient$helpful_category <- cut(df_browsing_coefficient$helpful_browsing_coefficient, breaks = c(-1, 0, 1, 2, 5, 30, 100, 500, Inf), labels = c("0 Useful", "1 Useful", "2 Useful", "3-5 Useful", "6-30 Useful", "31-100 Useful", "101-500 Useful", "501+ Useful"))
summary(df_browsing_coefficient$helpful_category)
df_browsing_coefficient$helpful_category <- cut(df_browsing_coefficient$helpful, breaks = c(-1, 0, 1, 2, 5, 30, 100, 500, Inf), labels = c("0 Useful", "1 Useful", "2 Useful", "3-5 Useful", "6-30 Useful", "31-100 Useful", "101-500 Useful", "501+ Useful"))
summary(df_browsing_coefficient$helpful_category)
df_browsing_coefficient$helpful_category <- cut(df_browsing_coefficient$helpful_browsing_coefficient, breaks = c(-1, 0, 1, 2, 5, 30, 100, 500, Inf), labels = c("0 Useful", "1 Useful", "2 Useful", "3-5 Useful", "6-30 Useful", "31-100 Useful", "101-500 Useful", "501+ Useful"))
summary(df_browsing_coefficient$helpful_category)
# install.packages("dgof")
library("dgof")
# Shapiro-Wilk sample size between 3 and 5000
# shapiro.test(df$helpful)
# Kolmogorov-Smirnov sample size larger than 5000
ks.test(df_browsing_coefficient$helpful_browsing_coefficient, "pnorm")
library(ggplot2)
ggplot(data = df_browsing_coefficient, mapping = aes(x = helpful_browsing_coefficient)) + geom_histogram(boundary = 0)
library(ggplot2)
summary(df_browsing_coefficient)
ggplot(data = df_browsing_coefficient, mapping = aes(x = helpful_browsing_coefficient)) + geom_histogram(boundary = 0)
library(ggplot2)
summary(df_browsing_coefficient$helpful_browsing_coefficient)
ggplot(data = df_browsing_coefficient, mapping = aes(x = helpful_browsing_coefficient)) + geom_histogram(boundary = 0)
take_log <- function(x) {
# To avoid negative infinity
# add one
x <- round(log(x + 1), digits = 4)
}
df_browsing_coefficient$helpful_log <- sapply(df_browsing_coefficient$helpful_browsing_coefficient, take_log)
ggplot(data = df_browsing_coefficient, mapping = aes(x = helpful_log)) + geom_histogram(boundary = 0)
# install.packages('car')
# install.packages('MVN')
library(car)
library(MVN)
library(dplyr)
# Random sample
# set.seed(123)
# sample_df <- sample_n(df, 1000)
# Build model
model <- lm(helpful_log ~ appraise + review_word_count + games + reply + played_hour + image, data = df_browsing_coefficient)
# Then, we can see the result
summary(model)
# VIF Multicollinearity test
vif(mod = model)
# Breusch-Pagan test: to check homoscedasticity
ncvTest(model)
# - plot Q-Q plot of residuals
qqnorm(model$residuals)
qqline(model$residuals)
# - plot density plot of residuals
plot(density(model$residuals), main = "Density plot of residuals")
# - scatter plot of residuals
plot(model$fitted.values, model$residuals, xlab = "Fitted values", ylab = "Residuals")
# Multivariate normality test
# mvn(model$residuals, mvnTest = "mardia")
